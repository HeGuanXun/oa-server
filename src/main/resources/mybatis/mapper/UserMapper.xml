<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hgx.common.dao.UserDao">
	<resultMap id="result_User_Map" type="com.hgx.common.entity.User">
		<id column="id" property="id" />
		<result column="username" property="username" />
		<result column="realName" property="realName" />
		<result column="password" property="password" />
		<result column="phoneNumber" property="phoneNumber" />
		<result column="sex" property="sex" />
		<result column="department" property="department" />
		<result column="createTime" property="createTime" />
	</resultMap>

	<sql id="user_Column">
		id,realName,username,password,phoneNumber,sex,department,createTime
	</sql>

	<!--获得类名为:User对应的数据库表的数据总行数 -->
	<select id="getUserRowCount" parameterType="com.hgx.common.utils.Assist" resultType="java.lang.Long">
		select count(*) from user
		<if test="require!=null">
			<include refid="assist" />
		</if>
	</select>

	<!-- 获得类名为:User对应数据库中表的数据集合 -->
	<select id="selectUser" parameterType="com.hgx.common.utils.Assist" resultMap="result_User_Map">
		select * from (
			select
		<choose>
			<when test="resultColumn!=null">${resultColumn}</when>
			<otherwise><include refid="user_Column" /></otherwise>
		</choose>
			from user
		<if test="require!=null"><include refid="assist" /></if>
		<if test="order !=null">${order}</if>
			) result
		<choose>
			<when test="startRow!=null">where page &gt; #{startRow} <if test="rowSize!=null">and page &lt;= <if test="startRow!=null">#{startRow}+</if>#{rowSize} </if></when>
			<otherwise><if test="rowSize!=null">where page &lt;= #{rowSize}</if></otherwise>
		</choose>
	</select>
		<!-- 通过User的id获得对应数据库中表的数据对象 -->
		<select id="selectUserById" parameterType="Integer" resultMap="result_User_Map">
		select
			<include refid="user_Column" />
		from user
		where id = #{id}
		</select>

	<!-- 获得一个User对象,以参数User对象中不为空的属性作为条件进行查询 -->
	<select id="selectUserObjSingle" parameterType="com.hgx.common.entity.User" resultMap="result_User_Map">
		select top 1
		<include refid="user_Column" />
		from user
		<where>
			<if test="realName != null"> and realName = #{realName}</if>
			<if test="password != null"> and password = #{password}</if>
			<if test="phoneNumber != null"> and phoneNumber = #{phoneNumber}</if>
			<if test="sex != null"> and sex = #{sex}</if>
			<if test="department != null"> and department = #{department}</if>
			<if test="createTime != null"> and createTime = #{createTime}</if>
			<if test="username != null"> and username = #{username}</if>
			<if test="id != null"> and id = #{id} </if>
		</where>
		LIMIT 1
	</select>

	<!-- 获得User对象,以参数User对象中不为空的属性作为条件进行查询 -->
	<select id="selectUserByObj" parameterType="com.hgx.common.entity.User" resultMap="result_User_Map">
		select
		<include refid="user_Column" />
		from user
		<where>
			<if test="realName != null"> and realName = #{realName}</if>
			<if test="password != null"> and password = #{password}</if>
			<if test="phoneNumber != null"> and phoneNumber = #{phoneNumber}</if>
			<if test="sex != null"> and sex = #{sex}</if>
			<if test="department != null"> and department = #{department}</if>
			<if test="createTime != null"> and createTime = #{createTime}</if>
			<if test="username != null"> and username = #{username}</if>
			<if test="id != null"> and id = #{id} </if>
		</where>
	</select>

	<!-- 将User中属性值不为null的数据,插入到对应数据库的表中 -->
	<insert id="insertNotNullUser" parameterType="com.hgx.common.entity.User">
		insert into user
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">id,</if>
			<if test="realName != null">realName,</if>
			<if test="username != null">username,</if>
			<if test="password != null">password,</if>
			<if test="phoneNumber != null">phoneNumber,</if>
			<if test="sex != null">sex,</if>
			<if test="department != null">department,</if>
			<if test="createTime != null">createTime,</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">#{id},</if>
			<if test="realName != null">#{realName},</if>
			<if test="username != null">#{username},</if>
			<if test="password != null">#{password},</if>
			<if test="phoneNumber != null">#{phoneNumber},</if>
			<if test="sex != null">#{sex},</if>
			<if test="department != null">#{department},</if>
			<if test="createTime != null">#{createTime},</if>
		</trim>
	</insert>

	<!-- 将User批量插入到对应数据库的表中 -->
	<insert id="insertUserByBatch" parameterType="ArrayList">
		insert into user(id,realName,username,password,phoneNumber,sex,department,createTime) values
		<foreach collection="list" item="item" index="index"
				 separator=",">
			(#{item.id},#{item.realName},#{item.username},#{item.password},#{item.phoneNumber},#{item.sex},#{item.department},#{item.createTime})
		</foreach>
	</insert>

		<!-- 通过User的id将数据库表中对应的数据删除 -->
		<delete id="deleteUserById" parameterType="Integer">
		delete from user
		where  id  =  #{id}
		</delete>

		<!-- 通过User的id将User中属性值不为null的数据更新到数据库对应的表中 -->
		<update id="updateNotNullUserById" parameterType="com.hgx.common.entity.User">
		update user
			<set>
				<if test="realName != null">realName = #{realName},</if>
				<if test="username != null">username = #{username},</if>
				<if test="password != null">password = #{password},</if>
				<if test="phoneNumber != null">phoneNumber = #{phoneNumber},</if>
				<if test="sex != null">sex = #{sex},</if>
				<if test="department != null">department = #{department},</if>
				<if test="createTime != null">createTime = #{createTime},</if>
			</set>
		where id = #{id}
		</update>
	<!-- assist是查询辅助工具类, ${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
	<sql id="assist">
		<where>
			<foreach collection="require" item="req" separator=" ">
				${req.require}
				<if test="req.value != null">
					#{req.value}
				</if>
				<if test="req.values != null">
					<foreach collection="req.values" item="value" separator=",">
						#{value}
					</foreach>
				</if>
				<if test="req.customRequire !=null">
					<foreach collection="req.customRequire" item="cr" separator=" ">
						${cr.require}
						<if test="cr.value != null">
							#{cr.value}
						</if>
						<if test="cr.values != null">
							<foreach collection="cr.values" item="value"
									 separator=",">
								#{value}
							</foreach>
						</if>
						<if test="cr.suffix != null"> ${cr.suffix}</if>
					</foreach>
				</if>
				<if test="req.suffix != null"> ${req.suffix}</if>
			</foreach>
		</where>
	</sql>

	<!-- updateAssist用于更新数据查询辅助工具类,作用assist与一致 -->
	<sql id="updateAssist">
		<where>
			<foreach collection="assist.require" item="req" separator=" ">
				${req.require}
				<if test="req.value != null">
					#{req.value}
				</if>
				<if test="req.values != null">
					<foreach collection="req.values" item="value" separator=",">
						#{value}
					</foreach>
				</if>
				<if test="req.customRequire !=null">
					<foreach collection="req.customRequire" item="cr" separator=" ">
						${cr.require}
						<if test="cr.value != null">
							#{cr.value}
						</if>
						<if test="cr.values != null">
							<foreach collection="cr.values" item="value"
									 separator=",">
								#{value}
							</foreach>
						</if>
						<if test="cr.suffix != null"> ${cr.suffix}</if>
					</foreach>
				</if>
				<if test="req.suffix != null"> ${req.suffix}</if>
			</foreach>
		</where>
	</sql>

</mapper>