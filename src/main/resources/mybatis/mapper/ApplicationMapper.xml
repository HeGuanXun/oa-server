<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hgx.common.dao.ApplicationDao">
	<resultMap id="result_Application_Map" type="com.hgx.common.entity.Application">
		<id column="id" property="id" />
		<result column="num" property="num" />
		<result column="name" property="name" />
		<result column="department" property="department" />
		<result column="type" property="type" />
		<result column="date" property="date" />
		<result column="relatedMan" property="relatedMan" />
		<result column="money" property="money" />
		<result column="described" property="described" />
		<result column="remark" property="remark" />
		<result column="status" property="status" />
		<result column="applyDate" property="applyDate" />
	</resultMap>

	<sql id="application_Column">
		id,num,name,department,type,date,relatedMan,money,described,remark,status,applyDate
	</sql>

	<!--获得类名为:Application对应的数据库表的数据总行数 -->
	<select id="getApplicationRowCount" parameterType="com.hgx.common.utils.Assist" resultType="java.lang.Long">
		select count(*) from application
		<if test="require!=null">
			<include refid="assist" />
		</if>
	</select>

	<!-- 获得类名为:Application对应数据库中表的数据集合 -->
	<select id="selectApplication" parameterType="com.hgx.common.utils.Assist" resultMap="result_Application_Map">
		select * from (
			select
		<choose>
			<when test="resultColumn!=null">${resultColumn}</when>
			<otherwise><include refid="application_Column" /></otherwise>
		</choose>
			from application
		<if test="require!=null"><include refid="assist" /></if>
		<if test="order !=null">${order}</if>
			) result
		<choose>
			<when test="startRow!=null">where page &gt; #{startRow} <if test="rowSize!=null">and page &lt;= <if test="startRow!=null">#{startRow}+</if>#{rowSize} </if></when>
			<otherwise><if test="rowSize!=null">where page &lt;= #{rowSize}</if></otherwise>
		</choose>
	</select>
		<!-- 通过Application的id获得对应数据库中表的数据对象 -->
		<select id="selectApplicationById" parameterType="Integer" resultMap="result_Application_Map">
		select
			<include refid="application_Column" />
		from application
		where id = #{id}
		</select>

	<!-- 获得一个Application对象,以参数Application对象中不为空的属性作为条件进行查询 -->
	<select id="selectApplicationObjSingle" parameterType="com.hgx.common.entity.Application" resultMap="result_Application_Map">
		select top 1
		<include refid="application_Column" />
		from application
		<where>
			<if test="num != null"> and num = #{num}</if>
			<if test="name != null"> and name = #{name}</if>
			<if test="department != null"> and department = #{department}</if>
			<if test="type != null"> and type = #{type}</if>
			<if test="date != null"> and date = #{date}</if>
			<if test="relatedMan != null"> and relatedMan = #{relatedMan}</if>
			<if test="money != null"> and money = #{money}</if>
			<if test="described != null"> and described = #{described}</if>
			<if test="remark != null"> and remark = #{remark}</if>
			<if test="status != null"> and status = #{status}</if>
			<if test="applyDate != null"> and applyDate = #{applyDate}</if>
			<if test="id != null"> and id = #{id} </if>
		</where>
		LIMIT 1
	</select>

	<!-- 获得Application对象,以参数Application对象中不为空的属性作为条件进行查询 -->
	<select id="selectApplicationByObj" parameterType="com.hgx.common.entity.Application" resultMap="result_Application_Map">
		select
		<include refid="application_Column" />
		from application
		<where>
			<if test="num != null"> and num = #{num}</if>
			<if test="name != null"> and name = #{name}</if>
			<if test="department != null"> and department = #{department}</if>
			<if test="type != null"> and type = #{type}</if>
			<if test="date != null"> and date = #{date}</if>
			<if test="relatedMan != null"> and relatedMan = #{relatedMan}</if>
			<if test="money != null"> and money = #{money}</if>
			<if test="described != null"> and described = #{described}</if>
			<if test="remark != null"> and remark = #{remark}</if>
			<if test="status != null"> and status = #{status}</if>
			<if test="applyDate != null"> and applyDate = #{applyDate}</if>
			<if test="id != null"> and id = #{id} </if>
		</where>
	</select>

	<!-- 将Application中属性值不为null的数据,插入到对应数据库的表中 -->
	<insert id="insertNotNullApplication" parameterType="com.hgx.common.entity.Application">
		insert into application
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">id,</if>
			<if test="num != null">num,</if>
			<if test="name != null">name,</if>
			<if test="department != null">department,</if>
			<if test="type != null">type,</if>
			<if test="date != null">date,</if>
			<if test="relatedMan != null">relatedMan,</if>
			<if test="money != null">money,</if>
			<if test="described != null">described,</if>
			<if test="remark != null">remark,</if>
			<if test="status != null">status,</if>
			<if test="applyDate != null">applyDate,</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">#{id},</if>
			<if test="num != null">#{num},</if>
			<if test="name != null">#{name},</if>
			<if test="department != null">#{department},</if>
			<if test="type != null">#{type},</if>
			<if test="date != null">#{date},</if>
			<if test="relatedMan != null">#{relatedMan},</if>
			<if test="money != null">#{money},</if>
			<if test="described != null">#{described},</if>
			<if test="remark != null">#{remark},</if>
			<if test="status != null">#{status},</if>
			<if test="applyDate != null">#{applyDate},</if>
		</trim>
	</insert>

	<!-- 将Application批量插入到对应数据库的表中 -->
	<insert id="insertApplicationByBatch" parameterType="ArrayList">
		insert into application(id,num,name,department,type,date,relatedMan,money,described,remark,status,applyDate) values
		<foreach collection="list" item="item" index="index"
				 separator=",">
			(#{item.id},#{item.num},#{item.name},#{item.department},#{item.type},#{item.date},#{item.relatedMan},#{item.money},#{item.described},#{item.remark},#{item.status},#{item.applyDate})
		</foreach>
	</insert>

		<!-- 通过Application的id将数据库表中对应的数据删除 -->
		<delete id="deleteApplicationById" parameterType="Integer">
		delete from application
		where  id  =  #{id}
		</delete>

		<!-- 通过Application的id将Application中属性值不为null的数据更新到数据库对应的表中 -->
		<update id="updateNotNullApplicationById" parameterType="com.hgx.common.entity.Application">
		update application
			<set>
				<if test="num != null">num = #{num},</if>
				<if test="name != null">name = #{name},</if>
				<if test="department != null">department = #{department},</if>
				<if test="type != null">type = #{type},</if>
				<if test="date != null">date = #{date},</if>
				<if test="relatedMan != null">relatedMan = #{relatedMan},</if>
				<if test="money != null">money = #{money},</if>
				<if test="described != null">described = #{described},</if>
				<if test="remark != null">remark = #{remark},</if>
				<if test="status != null">status = #{status},</if>
				<if test="applyDate != null">applyDate = #{applyDate},</if>
			</set>
		where id = #{id}
		</update>
	<!-- assist是查询辅助工具类, ${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
	<sql id="assist">
		<where>
			<foreach collection="require" item="req" separator=" ">
				${req.require}
				<if test="req.value != null">
					#{req.value}
				</if>
				<if test="req.values != null">
					<foreach collection="req.values" item="value" separator=",">
						#{value}
					</foreach>
				</if>
				<if test="req.customRequire !=null">
					<foreach collection="req.customRequire" item="cr" separator=" ">
						${cr.require}
						<if test="cr.value != null">
							#{cr.value}
						</if>
						<if test="cr.values != null">
							<foreach collection="cr.values" item="value"
									 separator=",">
								#{value}
							</foreach>
						</if>
						<if test="cr.suffix != null"> ${cr.suffix}</if>
					</foreach>
				</if>
				<if test="req.suffix != null"> ${req.suffix}</if>
			</foreach>
		</where>
	</sql>

	<!-- updateAssist用于更新数据查询辅助工具类,作用assist与一致 -->
	<sql id="updateAssist">
		<where>
			<foreach collection="assist.require" item="req" separator=" ">
				${req.require}
				<if test="req.value != null">
					#{req.value}
				</if>
				<if test="req.values != null">
					<foreach collection="req.values" item="value" separator=",">
						#{value}
					</foreach>
				</if>
				<if test="req.customRequire !=null">
					<foreach collection="req.customRequire" item="cr" separator=" ">
						${cr.require}
						<if test="cr.value != null">
							#{cr.value}
						</if>
						<if test="cr.values != null">
							<foreach collection="cr.values" item="value"
									 separator=",">
								#{value}
							</foreach>
						</if>
						<if test="cr.suffix != null"> ${cr.suffix}</if>
					</foreach>
				</if>
				<if test="req.suffix != null"> ${req.suffix}</if>
			</foreach>
		</where>
	</sql>

</mapper>